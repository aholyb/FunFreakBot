import { Bot } from "grammy";
import { config } from "dotenv";
import moment from "moment";
import OpenAI from "openai";
import { Analytics } from "@vercel/analytics/react"

config();

const messages: { text: string | undefined; date: any; user: string }[] = [];

const bot = new Bot(process.env.TELEGRAM_BOT_KEY as string);
const openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  });


  async function getSummary(text: string) {
    const completion = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
            { role: "developer", content: "You are a helpful assistant." },
            { "role": "user", "content": `–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: "${text}"` }
        ]
    });
    return completion.choices[0].message.content;
}

bot.hears('–§—Ä–∏–∫, —á—Ç–æ —É–º–µ–µ—à—å?', async (ctx) => { 
    ctx.reply(`<b>–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:</b>

1. –°—Ç–∞–≤–∏—Ç—å –∫–ª–æ—É–Ω–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–∞–¥–∏;
2. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
4. –°–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —á–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç`, {
        parse_mode: 'HTML',
    })
})

// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.hears(/–§—Ä–∏(–∫|—á–µ–∫|—à–µ—Ä|–¥—Ä–∏—Ö|—á–∏[–∫–∫]?)\s*,?\s*—Å—Ç–∞(—Ç–∏—Å—Ç–∏–∫–∞|—Ç–∞|—Ç—É–ª—è|—Ç[–∞-—è]*)/i, async (ctx) => {

    ctx.reply(`–í–æ—Ç –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∏–∫–∞, <b>${ctx.from?.first_name || ctx.from?.username || '–¥–æ—Ä–æ–≥—É—à–∞'}:</b>

<b>[Top –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π]</b>

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: <b>–¢—É—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>`, {
        parse_mode: 'HTML' 
    })

})

bot.hears(/–§—Ä–∏(–∫|—á–µ–∫|—à–µ—Ä|–¥—Ä–∏—Ö|—á–∏[–∫–∫]?)\s*,?\s*–º–æ—è\s*—Å—Ç–∞(—Ç–∏—Å—Ç–∏–∫–∞|—Ç–∞|—Ç—É–ª—è|—Ç[–∞-—è]*)/i, async (ctx) => {
    const userId = ctx.from?.id;

    if (userId) {
        ctx.reply(`–í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, <b>${ctx.from?.first_name || ctx.from?.username || '–¥–æ—Ä–æ–≥—É—à–∞'}:</b>`, {
            parse_mode: 'HTML',
        });
    } else {
        ctx.reply('–ü–æ —Ç–µ–±–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ :(')
    }
})

bot.command('summary', async (ctx) => {
    const twelveHoursAgo = moment().subtract(12, 'hours');
    const recentMessages = messages.filter(msg => moment(msg.date).isAfter(twelveHoursAgo));

    if (recentMessages.length > 0) {
        try {
            const summary = await getSummary(recentMessages.map((message) => `${message.user}: ${message.text}`).join(', '));
            ctx.reply(`–í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑:\n${summary}`, {
                parse_mode: 'HTML',
            });
        } catch(error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI:', error);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    };
})

// –ö–ª–æ—É–Ω –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message', (ctx) => {
    const userId = ctx.from.id;
    const messageTime = moment(ctx.message?.date * 1000);

    messages.push({
        text: ctx.message?.text,
        date: messageTime,
        user: ctx.from.username || ctx.from.first_name ,
    });

    if (userId === 382451968) {
        ctx.react('ü§°');
    }
})

bot.start();