"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const grammy_1 = require("grammy");
const dotenv_1 = require("dotenv");
const moment_1 = __importDefault(require("moment"));
const openai_1 = __importDefault(require("openai"));
(0, dotenv_1.config)();
const messages = [];
const bot = new grammy_1.Bot(process.env.TELEGRAM_BOT_KEY);
const openai = new openai_1.default({
    apiKey: process.env.OPENAI_API_KEY,
});
function getSummary(text) {
    return __awaiter(this, void 0, void 0, function* () {
        const completion = yield openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                { role: "developer", content: "You are a helpful assistant." },
                { "role": "user", "content": `–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: "${text}"` }
            ]
        });
        return completion.choices[0].message.content;
    });
}
bot.hears('–§—Ä–∏–∫, —á—Ç–æ —É–º–µ–µ—à—å?', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    ctx.reply(`<b>–°–ø–∏—Å–æ–∫ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:</b>

1. –°—Ç–∞–≤–∏—Ç—å –∫–ª–æ—É–Ω–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–∞–¥–∏;
2. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
4. –°–æ–±–∏—Ä–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —á–∞—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ —á–∞—Ç`, {
        parse_mode: 'HTML',
    });
}));
// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
bot.hears(/–§—Ä–∏(–∫|—á–µ–∫|—à–µ—Ä|–¥—Ä–∏—Ö|—á–∏[–∫–∫]?)\s*,?\s*—Å—Ç–∞(—Ç–∏—Å—Ç–∏–∫–∞|—Ç–∞|—Ç—É–ª—è|—Ç[–∞-—è]*)/i, (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b;
    ctx.reply(`–í–æ—Ç –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∏–∫–∞, <b>${((_a = ctx.from) === null || _a === void 0 ? void 0 : _a.first_name) || ((_b = ctx.from) === null || _b === void 0 ? void 0 : _b.username) || '–¥–æ—Ä–æ–≥—É—à–∞'}:</b>

<b>[Top –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π]</b>

–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ: <b>–¢—É—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>`, {
        parse_mode: 'HTML'
    });
}));
bot.hears(/–§—Ä–∏(–∫|—á–µ–∫|—à–µ—Ä|–¥—Ä–∏—Ö|—á–∏[–∫–∫]?)\s*,?\s*–º–æ—è\s*—Å—Ç–∞(—Ç–∏—Å—Ç–∏–∫–∞|—Ç–∞|—Ç—É–ª—è|—Ç[–∞-—è]*)/i, (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c;
    const userId = (_a = ctx.from) === null || _a === void 0 ? void 0 : _a.id;
    if (userId) {
        ctx.reply(`–í–æ—Ç —Ç–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, <b>${((_b = ctx.from) === null || _b === void 0 ? void 0 : _b.first_name) || ((_c = ctx.from) === null || _c === void 0 ? void 0 : _c.username) || '–¥–æ—Ä–æ–≥—É—à–∞'}:</b>`, {
            parse_mode: 'HTML',
        });
    }
    else {
        ctx.reply('–ü–æ —Ç–µ–±–µ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ :(');
    }
}));
bot.command('summary', (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    const twelveHoursAgo = (0, moment_1.default)().subtract(12, 'hours');
    const recentMessages = messages.filter(msg => (0, moment_1.default)(msg.date).isAfter(twelveHoursAgo));
    if (recentMessages.length > 0) {
        try {
            const summary = yield getSummary(recentMessages.map((message) => `${message.user}: ${message.text}`).join(', '));
            ctx.reply(`–í–æ—Ç –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑:\n${summary}`, {
                parse_mode: 'HTML',
            });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI:', error);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
    }
    ;
}));
// –ö–ª–æ—É–Ω –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message', (ctx) => {
    var _a, _b;
    const userId = ctx.from.id;
    const messageTime = (0, moment_1.default)(((_a = ctx.message) === null || _a === void 0 ? void 0 : _a.date) * 1000);
    messages.push({
        text: (_b = ctx.message) === null || _b === void 0 ? void 0 : _b.text,
        date: messageTime,
        user: ctx.from.username || ctx.from.first_name,
    });
    if (userId === 382451968) {
        ctx.react('ü§°');
    }
});
bot.start();
